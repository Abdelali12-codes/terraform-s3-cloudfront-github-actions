name: Deploy Website to Multi-Account S3

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: install dependencies
        run: npm install
        working-directory: ./react-app

      - name: react build
        run: npm run build 
        working-directory: ./react-app

      - name: Upload build folder as artifact
        uses: actions/upload-artifact@v3
        with:
          name: react-build
          path: build/
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    strategy:
      matrix:
        account_id:
          - "080266302756"  # Account 1 ID
          - "043433929958"  # Account 2 ID
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set Role ARN based on Account ID and Configure AWS Credentials
      - name: Set Role ARN and Configure AWS Credentials
        run: |
          # Dynamically generate role name based on the account ID
          ROLE_ARN="arn:aws:iam::${{ matrix.account_id }}:role/GitHubOIDCRole"
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
          
      # Step 3: Assume IAM Role and Configure AWS Credentials
      - name: Assume IAM Role and Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: us-east-1

      # Step 4: Terraform Init and Apply
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env: 
          TF_VAR_bucket_name: "my-website-bucket-${{ matrix.account_id }}"

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: react-build
          path: ./build
      # Step 5: Deploy Website Files to S3
      - name: Sync Website Content to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete
        env:
          SOURCE_DIR: "./build"  # Path to your website content
          AWS_S3_BUCKET: "my-website-bucket-${{ matrix.account_id }}"  # S3 bucket name from matrix
